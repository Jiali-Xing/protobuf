Total: 10ms
ROUTINE ======================== github.com/tgiannoukos/charon.(*PriceTable).UpdatePricebyQueueDelay in /go/pkg/mod/github.com/tgiannoukos/charon@v0.0.0-20231218004508-02fcb62b050a/tokenAndPrice.go
         0       10ms (flat, cum)   100% of Total
         .          .    131:func (pt *PriceTable) UpdatePricebyQueueDelay(ctx context.Context) error {
         .          .    132:	ownPrice_string, _ := pt.priceTableMap.Load("ownprice")
         .          .    133:	ownPrice := ownPrice_string.(int64)
         .          .    134:
         .          .    135:	// read the gapLatency from context ctx
         .          .    136:	gapLatency := ctx.Value("gapLatency").(float64)
         .          .    137:	// Calculate the priceStep as a fraction of the difference between gapLatency and latencyThreshold
         .          .    138:
         .          .    139:	diff := int64(gapLatency*1000) - pt.latencyThreshold.Microseconds()
         .          .    140:	adjustment := pt.calculatePriceAdjustment(diff)
         .          .    141:
         .       10ms    142:	logger("[Update Price by Queue Delay]: Own price %d, step %d\n", ownPrice, adjustment)
         .          .    143:
         .          .    144:	ownPrice += adjustment
         .          .    145:	// Set reservePrice to the larger of pt.guidePrice and 0
         .          .    146:	reservePrice := int64(math.Max(float64(pt.guidePrice), 0))
         .          .    147:
ROUTINE ======================== github.com/tgiannoukos/charon.(*PriceTable).queuingCheck in /go/pkg/mod/github.com/tgiannoukos/charon@v0.0.0-20231218004508-02fcb62b050a/overloadDetection.go
         0       10ms (flat, cum)   100% of Total
         .          .     35:func (pt *PriceTable) queuingCheck() {
         .          .     36:	// init a null histogram
         .          .     37:	var prevHist *metrics.Float64Histogram
         .          .     38:	for range time.Tick(pt.priceUpdateRate) {
         .          .     39:		// start a timer to measure the query latency
         .          .     40:		start := time.Now()
         .          .     41:		// get the current histogram
         .          .     42:		currHist := readHistogram()
         .          .     43:		/*
         .          .     44:			// calculate the differernce between the two histograms prevHist and currHist
         .          .     45:			diff := metrics.Float64Histogram{}
         .          .     46:			// if preHist is empty pointer, return currHist
         .          .     47:			if prevHist == nil {
         .          .     48:				diff = *currHist
         .          .     49:			} else {
         .          .     50:				diff = GetHistogramDifference(*prevHist, *currHist)
         .          .     51:			}
         .          .     52:			// maxLatency is the max of the histogram in milliseconds.
         .          .     53:			gapLatency := maximumBucket(&diff)
         .          .     54:		*/
         .          .     55:		if prevHist == nil {
         .          .     56:			// directly go to next iteration
         .          .     57:			prevHist = currHist
         .          .     58:			continue
         .          .     59:		}
         .          .     60:		gapLatency := maximumQueuingDelayms(prevHist, currHist)
         .          .     61:		// medianLatency := medianBucket(&diff)
         .          .     62:		// gapLatency := percentileBucket(&diff, 90)
         .          .     63:
         .          .     64:		ctx := context.Background()
         .          .     65:
         .          .     66:		// ToDo: move the print of the histogram to a file
         .          .     67:		/*
         .          .     68:			cumulativeLat := medianBucket(currHist)
         .          .     69:			// printHistogram(currHist)
         .          .     70:			logger("[Cumulative Waiting Time Median]:	%f ms.\n", cumulativeLat)
         .          .     71:			// printHistogram(&diff)
         .          .     72:			logger("[Incremental Waiting Time 90-tile]:	%f ms.\n", percentileBucket(&diff, 90))
         .          .     73:			logger("[Incremental Waiting Time Median]:	%f ms.\n", medianBucket(&diff))
         .          .     74:			logger("[Incremental Waiting Time Maximum]:	%f ms.\n", maximumBucket(&diff))
         .          .     75:		*/
         .          .     76:		logger("[Incremental Waiting Time Maximum]:	%f ms.\n", gapLatency)
         .          .     77:		// store the gapLatency in the context ctx
         .          .     78:		ctx = context.WithValue(ctx, "gapLatency", gapLatency)
         .          .     79:
         .          .     80:		if pt.priceStrategy == "step" {
         .          .     81:			pt.UpdateOwnPrice(pt.overloadDetection(ctx))
         .          .     82:		} else if pt.priceStrategy == "proportional" {
         .       10ms     83:			pt.UpdatePricebyQueueDelay(ctx)
         .          .     84:		} else if pt.priceStrategy == "exponential" {
         .          .     85:			pt.UpdatePricebyQueueDelayExp(ctx)
         .          .     86:		} else if pt.priceStrategy == "log" {
         .          .     87:			pt.UpdatePricebyQueueDelayLog(ctx)
         .          .     88:		}
