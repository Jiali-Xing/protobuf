Total: 2.37s
ROUTINE ======================== github.com/tgiannoukos/rajomon.(*PriceTable).LoadShedding in /go/pkg/mod/github.com/tgiannoukos/rajomon@v0.0.0-20231221071202-0347470ae6a2/rajomon.go
         0       10ms (flat, cum)  0.42% of Total
         .          .     98:func (pt *PriceTable) LoadShedding(ctx context.Context, tokens int64, methodName string) (int64, string, error) {
         .          .     99:	// if pt.loadShedding is false, then return tokens and nil error
         .          .    100:	if !pt.loadShedding {
         .          .    101:		totalPrice, _ := pt.RetrieveTotalPrice(ctx, methodName)
         .          .    102:		return tokens, totalPrice, nil
         .          .    103:	}
         .          .    104:
         .       10ms    105:	ownPrice_string, _ := pt.priceTableMap.Load("ownprice")
         .          .    106:	ownPrice := ownPrice_string.(int64)
         .          .    107:	downstreamPrice, _ := pt.RetrieveDSPrice(ctx, methodName)
         .          .    108:
         .          .    109:	if pt.priceAggregation == "maximal" {
         .          .    110:		// take the max of ownPrice and downstreamPrice
ROUTINE ======================== github.com/tgiannoukos/rajomon.(*PriceTable).UnaryInterceptor in /go/pkg/mod/github.com/tgiannoukos/rajomon@v0.0.0-20231221071202-0347470ae6a2/rajomon.go
      10ms      940ms (flat, cum) 39.66% of Total
         .          .    346:func (pt *PriceTable) UnaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
         .          .    347:	// This is the server side interceptor, it should check tokens, update price, do overload handling and attach price to response
         .          .    348:	startTime := time.Now()
         .          .    349:
         .       10ms    350:	md, ok := metadata.FromIncomingContext(ctx)
         .          .    351:	if !ok {
         .          .    352:		return nil, errMissingMetadata
         .          .    353:	}
         .          .    354:
         .          .    355:	// print all the k-v pairs in the metadata md
         .          .    356:	// for k, v := range md {
         .          .    357:	// 	logger("[Received Req]:	The metadata for request is %s: %s\n", k, v)
         .          .    358:	// }
         .          .    359:	if debug {
         .          .    360:		var metadataLog string
         .          .    361:		for k, v := range md {
      10ms       60ms    362:			metadataLog += fmt.Sprintf("%s: %s, ", k, v)
         .          .    363:		}
         .          .    364:		if metadataLog != "" {
         .      100ms    365:			logger("[Received Req]: The metadata for request is %s\n", metadataLog)
         .          .    366:		}
         .          .    367:	}
         .          .    368:
         .          .    369:	// Jiali: overload handler, do AQM, deduct the tokens on the request, update price info
         .          .    370:	var tok int64
         .          .    371:	var err error
         .          .    372:	// if the price are additive, then the tokens are stored in the "tokens" or tokens-nodeName field of the metadata
         .          .    373:	if pt.priceAggregation == "additive" {
         .          .    374:		if val, ok := md["tokens-"+pt.nodeName]; ok {
         .          .    375:			// logger("[Received Req]:	tokens for %s are %s\n", pt.nodeName, val)
         .          .    376:			// raise error if the val length is not 1
         .          .    377:			if len(val) > 1 {
         .          .    378:				return nil, status.Errorf(codes.InvalidArgument, "duplicated tokens")
         .          .    379:			} else if len(val) == 0 {
         .          .    380:				return nil, errMissingMetadata
         .          .    381:			}
         .          .    382:			tok, _ = strconv.ParseInt(val[0], 10, 64)
         .          .    383:		} else {
         .          .    384:			logger("[Received Req]:	tokens are %s\n", md["tokens"])
         .          .    385:			// raise error if the tokens length is not 1
         .          .    386:			if len(md["tokens"]) > 1 {
         .          .    387:				return nil, status.Errorf(codes.InvalidArgument, "duplicated tokens")
         .          .    388:			} else if len(md["tokens"]) == 0 {
         .          .    389:				return nil, errMissingMetadata
         .          .    390:			}
         .          .    391:			tok, _ = strconv.ParseInt(md["tokens"][0], 10, 64)
         .          .    392:		}
         .          .    393:	} else if pt.priceAggregation == "maximal" {
         .          .    394:		// if the price are maximal, then the tokens are stored in the "tokens" field of the metadata
         .          .    395:		if val, ok := md["tokens"]; ok {
         .          .    396:			// logger("[Received Req]:	tokens for %s are %s\n", pt.nodeName, val)
         .          .    397:			// raise error if the val length is not 1
         .          .    398:			if len(val) > 1 {
         .          .    399:				return nil, status.Errorf(codes.InvalidArgument, "duplicated tokens")
         .          .    400:			} else if len(val) == 0 {
         .          .    401:				return nil, errMissingMetadata
         .          .    402:			}
         .          .    403:			tok, _ = strconv.ParseInt(val[0], 10, 64)
         .          .    404:		}
         .          .    405:	}
         .          .    406:
         .          .    407:	// overload handler:
         .          .    408:	methodName := md["method"][0]
         .       10ms    409:	tokenleft, price_string, err := pt.LoadShedding(ctx, tok, methodName)
         .          .    410:	if err == InsufficientTokens && pt.loadShedding {
         .          .    411:		// price_string, _ := pt.RetrieveTotalPrice(ctx, methodName)
         .          .    412:		header := metadata.Pairs("price", price_string, "name", pt.nodeName)
         .          .    413:		logger("[Sending Error Resp]:	Total price is %s\n", price_string)
         .          .    414:		grpc.SendHeader(ctx, header)
         .          .    415:
         .          .    416:		// totalLatency := time.Since(startTime)
         .          .    417:		// logger("[Server-side Timer] Processing Duration is: %.2d milliseconds\n", totalLatency.Milliseconds())
         .          .    418:
         .          .    419:		// if pt.pinpointLatency {
         .          .    420:		// 	if totalLatency > pt.observedDelay {
         .          .    421:		// 		pt.observedDelay = totalLatency // update the observed delay
         .          .    422:		// 	}
         .          .    423:		// }
         .          .    424:		// return nil, status.Errorf(codes.ResourceExhausted, "req dropped, try again later")
         .          .    425:		return nil, status.Errorf(codes.ResourceExhausted, "%s req dropped by %s. Try again later.", methodName, pt.nodeName)
         .          .    426:	}
         .          .    427:	if err != nil && err != InsufficientTokens {
         .          .    428:		// The limiter failed. This error should be logged and examined.
         .          .    429:		log.Println(err)
         .          .    430:		return nil, status.Error(codes.Internal, "internal error")
         .          .    431:	}
         .          .    432:
         .          .    433:	// tok_string := strconv.FormatInt(tokenleft, 10)
         .          .    434:	// logger("[Preparing Sub Req]:	Token left is %s\n", tok_string)
         .          .    435:
         .          .    436:	if pt.priceAggregation == "additive" {
         .          .    437:		// [critical] Jiali: Being outgoing seems to be critical for us.
         .          .    438:		// Jiali: we need to attach the token info to the context, so that the downstream can retrieve it.
         .          .    439:		// ctx = metadata.AppendToOutgoingContext(ctx, "tokens", tok_string)
         .          .    440:		// Jiali: we actually need multiple kv pairs for the token information, because one context is sent to multiple downstreams.
         .          .    441:		downstreamTokens, _ := pt.SplitTokens(ctx, tokenleft, methodName)
         .          .    442:
         .          .    443:		ctx = metadata.AppendToOutgoingContext(ctx, downstreamTokens...)
         .          .    444:
         .          .    445:	}
         .          .    446:	// queuingDelay := time.Since(startTime)
         .          .    447:	// logger("[Server-side Timer] Queuing delay is: %.2d milliseconds\n", queuingDelay.Milliseconds())
         .          .    448:
         .          .    449:	// if pt.pinpointQueuing {
         .          .    450:	// 	// increment the counter and add the queuing delay to the observed delay
         .          .    451:	// 	pt.Increment()
         .          .    452:	// 	pt.observedDelay += queuingDelay
         .          .    453:	// }
         .          .    454:
         .          .    455:	if pt.pinpointLatency {
         .          .    456:		totalLatency := time.Since(startTime)
         .          .    457:		// log the total latency in unit of millisecond, decimal precision 2
         .          .    458:		logger("[Server-side Interceptor] Overhead is: %.2f milliseconds\n", float64(totalLatency.Microseconds())/1000)
         .          .    459:
         .          .    460:		// if totalLatency > pt.observedDelay {
         .          .    461:		// 	pt.observedDelay = totalLatency // update the observed delay
         .          .    462:		// }
         .          .    463:
         .          .    464:		// change the observed delay to the average latency, first, sum the latency and increment the counter
         .          .    465:		pt.Increment()
         .          .    466:		pt.observedDelay += totalLatency
         .          .    467:	}
         .      750ms    468:	m, err := handler(ctx, req)
         .          .    469:
         .          .    470:	// Attach the price info to response before sending
         .          .    471:	// right now let's just propagate the corresponding price of the RPC method rather than a whole pricetable.
         .          .    472:	// if not pt.lazyResponse or if pt.lazyResponse is true but the tokenleft is smaller than
         .          .    473:	if !pt.lazyResponse || tokenleft*10 < tok {
         .          .    474:		// price_string, _ := pt.RetrieveTotalPrice(ctx, methodName)
         .          .    475:		header := metadata.Pairs("price", price_string, "name", pt.nodeName)
         .          .    476:		logger("[Preparing Resp]:	Total price of %s is %s\n", methodName, price_string)
         .          .    477:		grpc.SendHeader(ctx, header)
         .          .    478:	} else {
         .       10ms    479:		logger("[Preparing Resp]:	Lazy response is enabled, no price attached to response.\n")
         .          .    480:	}
         .          .    481:
         .          .    482:	if err != nil {
         .          .    483:		logger("RPC failed with error %v", err)
         .          .    484:	}
ROUTINE ======================== github.com/tgiannoukos/rajomon.(*PriceTable).queuingCheck in /go/pkg/mod/github.com/tgiannoukos/rajomon@v0.0.0-20231221071202-0347470ae6a2/overloadDetection.go
         0       10ms (flat, cum)  0.42% of Total
         .          .     35:func (pt *PriceTable) queuingCheck() {
         .          .     36:	// init a null histogram
         .          .     37:	var prevHist *metrics.Float64Histogram
         .          .     38:	for range time.Tick(pt.priceUpdateRate) {
         .          .     39:		// start a timer to measure the query latency
         .          .     40:		start := time.Now()
         .          .     41:		// get the current histogram
         .       10ms     42:		currHist := readHistogram()
         .          .     43:		/*
         .          .     44:			// calculate the differernce between the two histograms prevHist and currHist
         .          .     45:			diff := metrics.Float64Histogram{}
         .          .     46:			// if preHist is empty pointer, return currHist
         .          .     47:			if prevHist == nil {
ROUTINE ======================== github.com/tgiannoukos/rajomon.logger in /go/pkg/mod/github.com/tgiannoukos/rajomon@v0.0.0-20231221071202-0347470ae6a2/logger.go
      10ms      110ms (flat, cum)  4.64% of Total
         .          .      9:func logger(format string, a ...interface{}) {
         .          .     10:	if debug {
         .       10ms     11:		timestamp := time.Now().Format("2006-01-02T15:04:05.999999999-07:00")
         .       90ms     12:		fmt.Printf("LOG: "+timestamp+"|\t"+format+"\n", a...)
         .          .     13:	}
      10ms       10ms     14:}
ROUTINE ======================== github.com/tgiannoukos/rajomon.readHistogram in /go/pkg/mod/github.com/tgiannoukos/rajomon@v0.0.0-20231221071202-0347470ae6a2/queuingDelay.go
         0       10ms (flat, cum)  0.42% of Total
         .          .    133:func readHistogram() *metrics.Float64Histogram {
         .          .    134:	// Create a sample for metric /sched/latencies:seconds and /sync/mutex/wait/total:seconds
         .          .    135:	const queueingDelay = "/sched/latencies:seconds"
         .          .    136:	measureMutexWait := false
         .          .    137:
         .          .    138:	// Create a sample for the metric.
         .       10ms    139:	sample := make([]metrics.Sample, 1)
         .          .    140:	sample[0].Name = queueingDelay
         .          .    141:	if measureMutexWait {
         .          .    142:		const mutexWait = "/sync/mutex/wait/total:seconds"
         .          .    143:		sample[1].Name = mutexWait
         .          .    144:	}
