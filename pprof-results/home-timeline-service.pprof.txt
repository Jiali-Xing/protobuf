Total: 1.33s
ROUTINE ======================== github.com/tgiannoukos/charon.(*PriceTable).UnaryInterceptor in /go/pkg/mod/github.com/tgiannoukos/charon@v0.0.0-20230929184655-44ffc2071f6d/charon.go
         0      140ms (flat, cum) 10.53% of Total
         .          .    319:func (pt *PriceTable) UnaryInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {
         .          .    320:	// This is the server side interceptor, it should check tokens, update price, do overload handling and attach price to response
         .          .    321:	startTime := time.Now()
         .          .    322:
         .          .    323:	md, ok := metadata.FromIncomingContext(ctx)
         .          .    324:	if !ok {
         .          .    325:		return nil, errMissingMetadata
         .          .    326:	}
         .          .    327:
         .          .    328:	// print all the k-v pairs in the metadata md
         .          .    329:	// for k, v := range md {
         .          .    330:	// 	pt.logger(ctx, "[Received Req]:	The metadata for request is %s: %s\n", k, v)
         .          .    331:	// }
         .          .    332:	var metadataLog string
         .       10ms    333:	for k, v := range md {
         .       40ms    334:		metadataLog += fmt.Sprintf("%s: %s, ", k, v)
         .          .    335:	}
         .          .    336:	if metadataLog != "" {
         .          .    337:		pt.logger(ctx, "[Received Req]: The metadata for request is %s\n", metadataLog)
         .          .    338:	}
         .          .    339:
         .          .    340:	// Jiali: overload handler, do AQM, deduct the tokens on the request, update price info
         .          .    341:	var tok int64
         .          .    342:	var err error
         .          .    343:
         .          .    344:	if val, ok := md["tokens-"+pt.nodeName]; ok {
         .          .    345:		pt.logger(ctx, "[Received Req]:	tokens for %s are %s\n", pt.nodeName, val)
         .          .    346:		// raise error if the val length is not 1
         .          .    347:		if len(val) > 1 {
         .          .    348:			return nil, status.Errorf(codes.InvalidArgument, "duplicated tokens")
         .          .    349:		} else if len(val) == 0 {
         .          .    350:			return nil, errMissingMetadata
         .          .    351:		}
         .          .    352:		tok, err = strconv.ParseInt(val[0], 10, 64)
         .          .    353:	} else {
         .          .    354:		pt.logger(ctx, "[Received Req]:	tokens are %s\n", md["tokens"])
         .          .    355:		// raise error if the tokens length is not 1
         .          .    356:		if len(md["tokens"]) > 1 {
         .          .    357:			return nil, status.Errorf(codes.InvalidArgument, "duplicated tokens")
         .          .    358:		} else if len(md["tokens"]) == 0 {
         .          .    359:			return nil, errMissingMetadata
         .          .    360:		}
         .          .    361:		tok, err = strconv.ParseInt(md["tokens"][0], 10, 64)
         .          .    362:	}
         .          .    363:
         .          .    364:	// overload handler:
         .          .    365:	methodName := md["method"][0]
         .          .    366:	tokenleft, err := pt.LoadShedding(ctx, tok, methodName)
         .          .    367:	if err == InsufficientTokens && pt.loadShedding {
         .          .    368:		price_string, _ := pt.RetrieveTotalPrice(ctx, methodName)
         .          .    369:		header := metadata.Pairs("price", price_string, "name", pt.nodeName)
         .          .    370:		pt.logger(ctx, "[Sending Error Resp]:	Total price is %s\n", price_string)
         .          .    371:		grpc.SendHeader(ctx, header)
         .          .    372:
         .          .    373:		totalLatency := time.Since(startTime)
         .          .    374:		pt.logger(ctx, "[Server-side Timer] Processing Duration is: %.2d milliseconds\n", totalLatency.Milliseconds())
         .          .    375:
         .          .    376:		// if pt.pinpointLatency {
         .          .    377:		// 	if totalLatency > pt.observedDelay {
         .          .    378:		// 		pt.observedDelay = totalLatency // update the observed delay
         .          .    379:		// 	}
         .          .    380:		// }
         .          .    381:		// return nil, status.Errorf(codes.ResourceExhausted, "req dropped, try again later")
         .          .    382:		return nil, status.Errorf(codes.ResourceExhausted, "%s req dropped by %s. %d token for %s price. Try again later.", methodName, pt.nodeName, tok, price_string)
         .          .    383:	}
         .          .    384:	if err != nil && err != InsufficientTokens {
         .          .    385:		// The limiter failed. This error should be logged and examined.
         .          .    386:		log.Println(err)
         .          .    387:		return nil, status.Error(codes.Internal, "internal error")
         .          .    388:	}
         .          .    389:
         .          .    390:	tok_string := strconv.FormatInt(tokenleft, 10)
         .          .    391:	pt.logger(ctx, "[Preparing Sub Req]:	Token left is %s\n", tok_string)
         .          .    392:
         .          .    393:	// [critical] Jiali: Being outgoing seems to be critical for us.
         .          .    394:	// Jiali: we need to attach the token info to the context, so that the downstream can retrieve it.
         .          .    395:	// ctx = metadata.AppendToOutgoingContext(ctx, "tokens", tok_string)
         .          .    396:	// Jiali: we actually need multiple kv pairs for the token information, because one context is sent to multiple downstreams.
         .          .    397:	downstreamTokens, _ := pt.SplitTokens(ctx, tokenleft, methodName)
         .          .    398:
         .       10ms    399:	ctx = metadata.AppendToOutgoingContext(ctx, downstreamTokens...)
         .          .    400:
         .          .    401:	// queuingDelay := time.Since(startTime)
         .          .    402:	// pt.logger(ctx, "[Server-side Timer] Queuing delay is: %.2d milliseconds\n", queuingDelay.Milliseconds())
         .          .    403:
         .          .    404:	// if pt.pinpointQueuing {
         .          .    405:	// 	// increment the counter and add the queuing delay to the observed delay
         .          .    406:	// 	pt.Increment()
         .          .    407:	// 	pt.observedDelay += queuingDelay
         .          .    408:	// }
         .          .    409:
         .          .    410:	totalLatency := time.Since(startTime)
         .          .    411:	// log the total latency in unit of millisecond, decimal precision 2
         .          .    412:	pt.logger(ctx, "[Server-side Interceptor] Overhead is: %.2f milliseconds\n", float64(totalLatency.Microseconds())/1000)
         .          .    413:
         .       80ms    414:	m, err := handler(ctx, req)
         .          .    415:
         .          .    416:	// Attach the price info to response before sending
         .          .    417:	// right now let's just propagate the corresponding price of the RPC method rather than a whole pricetable.
         .          .    418:	// totalPrice_string, _ := PriceTableInstance.ptmap.Load("totalprice")
         .          .    419:
ROUTINE ======================== github.com/tgiannoukos/charon.(*PriceTable).UnaryInterceptorClient in /go/pkg/mod/github.com/tgiannoukos/charon@v0.0.0-20230929184655-44ffc2071f6d/charon.go
         0      290ms (flat, cum) 21.80% of Total
         .          .    134:func (pt *PriceTable) UnaryInterceptorClient(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {
         .          .    135:	// Jiali: the following line print the method name of the req/response, will be used to update the
         .       20ms    136:	md, _ := metadata.FromOutgoingContext(ctx)
         .          .    137:	methodName := md["method"][0]
         .       10ms    138:	pt.logger(ctx, "[Before Sub Req]:	Node %s calling %s\n", pt.nodeName, methodName)
         .          .    139:	// Jiali: before sending. check the price, calculate the #tokens to add to request, update the total tokens
         .          .    140:	// overwrite rather than append to the header with the node name of this client
         .       10ms    141:	ctx = metadata.AppendToOutgoingContext(ctx, "name", pt.nodeName)
         .          .    142:	var header metadata.MD // variable to store header and trailer
         .      250ms    143:	err := invoker(ctx, method, req, reply, cc, grpc.Header(&header))
         .          .    144:
         .          .    145:	// run the following code asynchorously, without blocking the main thread.
         .          .    146:	// go func() {
         .          .    147:	// Jiali: after replied. update and store the price info for future
         .          .    148:	if len(header["price"]) > 0 {
